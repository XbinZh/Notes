
1. 代码风格

1.1 命名
原则1           为包、类、方法、变量取一个好名字，使代码易于理解
1)   能清晰的表达意图：使用完整的描述性的单词，避免使用单个字母、未形成惯例的缩写来命名。例如int elapsedTimeInDays要比int d好得多；

2)   避免造成误导：有误导的名字比表达不清的名字还要有危害性，比如String accountList其实并不是一个List类型；a=l,是数字1还是字母l？；TTLCONFUSION与TTLC0NFUSION名称太相似；

3)   避免不必要的编解码：代码被人阅读的次数要远远多于计算机，因此要注意可读性，避免不必要的人脑编解码。比如在JAVA中不建议采用匈牙利命名法：Java是强类型语言，且IDE已很先进，在编译前就能及早发现类型错误，因此匈牙利命名法已无用武之地，况且它还有可能导致错误信息，比如PhoneNumber strPhone当类型变更后，名称未变更导致提供错误信息；

4)   能区分出意思：比如以下名称：product，productInfo，productData，表达的意思都差不多，让人从名称并不能区分出它们各自代表的东西到底有什么不同。因此建议不要在变量/类名后加info，data，object等一般意义的词。

5)   不用或少用缩写：小于15个字母的一般不用缩写。超过15个字母的，可采用以去掉元音字母的方法或者行业内约定俗成的缩写，且缩写保持驼峰格式，不要编造不符合惯例的缩写。比如serviceDataPoint，可以缩写为svcDataPnt，不可缩写为SDP。如果要用缩写，仅第一个字母大写其余小写，例如getHTTPRequest改为getHttpRequest。

规则1           禁止使用魔鬼数字

说明：直接使用数字，造成代码难以理解，也难以维护。应采用有意义的静态变量或枚举来代替。例外情况，有些特殊情况下，如循环或比较时采用数字0，-1，1，这些情况可采用数字。

规则2           常量命名，由全大写单词组成，单词间用下划线分隔，且使用 static final修饰

规则3           变量、属性命名，使用名词，并采用首字母小写的驼峰命名法

规则4           方法的命名，用动词和动宾结构，并采用首字母小写的驼峰命名法
  说明：格式如下 
  get + 非布尔属性名()
  is + 布尔属性名()
  set + 属性名()
  has + 名词/形容词()
  动词()
  动词 + 宾语()
  
规则5           类和接口的命名，采用首字母大写的驼峰命名法

规则6           包的命名，由一个或若干个单词组成，所有的字母均为小写

说明：包名采用域后缀倒置的加上自定义的包名，采用小写字母，都应该以com.XXX开头（除一些特殊原因），再加上产品名称和模块名称。部门内部应该规划好包名的范围，防止产生冲突。
建议1           数组声明的时候使用 int[] index，而不要使用 int index[]
